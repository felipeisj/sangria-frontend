[{"/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/index.js":"1","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/App.js":"2","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/reportWebVitals.js":"3","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/UserContext.js":"4","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/general/Login.js":"5","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/general/Inicio.js":"6","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/Tabla.js":"7","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/PrivateRoute.js":"8","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/menu/Menu.js":"9","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/Logout.js":"10","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/Informacion.js":"11","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/Ejercitar.js":"12","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/utils/Api.js":"13","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/Layout.js":"14","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/menu/MenuUsuario.js":"15"},{"size":596,"mtime":1614083143000,"results":"16","hashOfConfig":"17"},{"size":1321,"mtime":1622502986000,"results":"18","hashOfConfig":"17"},{"size":362,"mtime":1612289445000,"results":"19","hashOfConfig":"17"},{"size":1220,"mtime":1623349629000,"results":"20","hashOfConfig":"17"},{"size":3884,"mtime":1631029725105,"results":"21","hashOfConfig":"17"},{"size":1532,"mtime":1619198446000,"results":"22","hashOfConfig":"17"},{"size":1312,"mtime":1616512759000,"results":"23","hashOfConfig":"17"},{"size":630,"mtime":1612289445000,"results":"24","hashOfConfig":"17"},{"size":2389,"mtime":1630947812780,"results":"25","hashOfConfig":"17"},{"size":442,"mtime":1613588532000,"results":"26","hashOfConfig":"17"},{"size":7963,"mtime":1623871526000,"results":"27","hashOfConfig":"17"},{"size":15863,"mtime":1630947690583,"results":"28","hashOfConfig":"17"},{"size":2034,"mtime":1612289445000,"results":"29","hashOfConfig":"17"},{"size":958,"mtime":1618973560000,"results":"30","hashOfConfig":"17"},{"size":1311,"mtime":1621572077000,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"5wrybb",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"34"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"34"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"34"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"34"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"34"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"34"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},"/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/index.js",[],["70","71"],"/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/App.js",[],"/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/reportWebVitals.js",[],"/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/UserContext.js",["72"],"import React, { useState, useEffect } from 'react'\nimport { Api} from './utils/Api';\n\nconst UserContext  = React.createContext(\n    {perfil: {id : null, nombre : null, academico : null},\n    setPerfil: () => {}})\n\nexport const UserConsumer = UserContext.Consumer\n\nexport const UserProvider = (props) => {\n  useEffect(\n        () => {\n          const id = localStorage.getItem('id');\n          if(id !== '' && id !== null) {\n              obtenerUsuario(id)\n          }\n        },\n        []\n    )\n\n    async function obtenerUsuario(usuario_id){\n      let resultado = await Api(`/api/usuarios/${usuario_id}`, {}, {}, true, 'get');  \n      if (resultado && resultado.status === 200) {\n          setPerfil(resultado.data.usuario)\n      }else{\n          console.log(\"no hay usuario\")\n      }\n    }\n\n  const setPerfil = (perfil) => {\n    setState({...state, perfil: perfil})\n  }\n\n  const initState = {\n      perfil: {id: localStorage.getItem('id'), nombre: localStorage.getItem('nombre'), academico: false},\n      setPerfil: setPerfil\n  }\n  const [state, setState] = useState(initState)\n\n  return (\n    <UserContext.Provider value={state}>\n      {props.children}\n    </UserContext.Provider>\n  )\n}\n\n\nexport default UserContext","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/general/Login.js",[],"/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/general/Inicio.js",["73","74","75","76"],"import React, {useState, useEffect, useContext} from 'react';\n// import UserContext from '../UserContext';\n// import Layout from '../componentes/Layout';\n// import { Link } from 'react-router-dom';\nimport {Container, Row, Button, Card} from 'react-bootstrap';\nimport {Api} from '../utils/Api';\n\n\n\n\nfunction Inicio(props) {\n    function ingresar() {\n        props.history.push('/login');\n    }\n\n    return (\n            <Container fluid=\"md\">\n                <Row>\n                    <Card>\n                        <Card.Body>\n                            <Card.Title>Bienvenido a SangrIA</Card.Title>\n                            <Card.Subtitle className=\"mb-2 text-muted\">Investigador Responsable: Felipe Salazar</Card.Subtitle>\n                            <Card.Text>\n                            Con el software SangrIA usted podrá clasificar elementos formes. Hay dos maneras de hacerlo,\n                            puede ejercitar su capacidad de reconocimiento al etiquetar células o si tiene dudas sobre la \n                            clasificación de una muestra de sangre, puede subirla a SangrIA y el software la clasificará\n                            por usted.\n                            </Card.Text>\n                            <Button variant=\"primary\" onClick={ingresar}>Ingresar</Button>\n                            <Button variant=\"light\">Solicitar Cuenta</Button>\n                        </Card.Body>\n                    </Card>\n                </Row>\n            </Container>\n\n    )\n}\n\nexport default Inicio;","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/Tabla.js",[],"/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/PrivateRoute.js",[],"/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/menu/Menu.js",["77","78","79"],"import React, {useState, useContext, useEffect} from 'react';\nimport {Form, NavDropdown, ButtonGroup, Navbar, Nav} from 'react-bootstrap'\nimport {withRouter, Link} from 'react-router-dom';\nimport MenuUsuario from './MenuUsuario';\nimport UserContext from '../../UserContext';\n\nfunction Menu(props){\n    const contexto = useContext(UserContext);\n\n    return (\n        <Navbar bg=\"light\" expand=\"lg\">\n            <Navbar.Brand as={Link} to='/menu'>\n                {/* <img\n                    src={window.location.origin + '/logo_uach.png'}\n                    // width=\"50\"\n                    // height=\"50\"\n                    className=\"d-inline-block align-top\"\n                    alt=\"Logo Universidad Austral de Chile\"\n                /> */}\n                SangrIA\n            </Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"mr-auto\">\n                    {/* <Nav.Link as={Link} to='/'>Home</Nav.Link> */}\n                    <NavDropdown title=\"Subir Imagen\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item as={Link} to='/'>Tomar Foto</NavDropdown.Item>\n                        <NavDropdown.Divider />\n                        {/* <Dropdown.Header>INFORMES</Dropdown.Header> */}\n                        <NavDropdown.Item as={Link} to='/'>Seleccionar foto desde biblioteca</NavDropdown.Item>\n                        \n                    </NavDropdown>\n                    <NavDropdown title=\"Ejercitar\" id=\"basic-nav-dropdown\">\n                        <NavDropdown.Item as={Link} to='/ejercitar'>Go</NavDropdown.Item>\n                    </NavDropdown>\n                    {contexto.perfil.academico==true &&\n                        <NavDropdown title=\"Dataset\" id=\"basic-nav-dropdown\">\n                            <NavDropdown.Item as={Link} to='/informacion'>Respuestas</NavDropdown.Item>\n                        </NavDropdown>\n                    }\n                </Nav>\n                <Form inline className=\"float-right\">\n                    {/* <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" /> */}\n                    <ButtonGroup>\n                        <MenuUsuario/>\n                    </ButtonGroup>\n                </Form>\n            </Navbar.Collapse>\n        </Navbar>\n    );\n}\n\nexport default withRouter(Menu);","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/Logout.js",["80"],"import React, {useContext, useEffect} from 'react';\nimport UserContext from '../UserContext'\n\n\nfunction Logout(props) {\n\n    const contexto = useContext(UserContext)\n\n    useEffect(\n        () => {\n            localStorage.clear();\n            contexto.setPerfil({nombre: null, permisos: null});\n            props.history.push('/login');\n        },\n        []\n    )\n\n    return (\n        <p>See you later!</p>\n    );\n}\n\nexport default Logout;","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/Informacion.js",["81","82","83","84","85","86"],"import React, {useState, useContext, useEffect} from 'react';\nimport { Link} from 'react-router-dom';\nimport { Button, Table, Form} from 'react-bootstrap'\nimport Layout from './Layout';\nimport { Api} from '../utils/Api';\n\nfunction Informacion(props) {\n\n    const columns = [  \n        { dataField: 'url_imagen', text: 'Célula', width: 150 },\n        { dataField: 'nombre', text: 'Nombre', width: 70 },\n        { dataField: 'acciones', text: 'Acciones', width: 70 }\n    ];\n    const [celula, setCelula] = useState([]);\n    const [rows, setRows] = useState([]);\n    const [estadoMostrarNoValidas, setEstadoMostrarNoValidas] = useState(false);\n    \n    async function obtenerDatos() { //función que identifica si el usuario es admin\n        let resultado = await Api(`api/usuarios/no-admin`);\n        if (resultado && resultado.status === 200) {\n            setRows(resultado.data.usuarios);\n        } else {\n            // alert.show('Error al cargar datos', { type: 'error' });\n            setRows([]);\n        }\n    }\n\n    async function obtenerDatosCelula() {\n    let resultado = await Api('api/celulas-etiquetadas', {}, {}, true, 'get');\n        console.log(resultado)\n        if (resultado && resultado.status === 200) {\n            if(resultado.data.celulas){\n                setCelula(resultado.data.celulas);\n            }else{\n                console.log(\"no hay imagenes para clasificar\");\n            }\n            \n        }else {\n                //alert.show('Error al cargar datos', { type: 'error' });\n            setCelula([]);\n        }\n    }\n\n    useEffect(\n        () => {\n            obtenerDatos();\n            obtenerDatosCelula();\n        },\n        []\n    )\n\n    async function cambiarCheckValidar(e, celula){\n        // let data = {\n        //     id : celula.id,\n        //     valor : celula.valor,\n        //     contador : celula.contador,\n        //     nombre : celula.nombre,\n        //     etiqueta_id : celula.id,\n        //     path : celula.path,\n        //     validacion : celula.validacion,\n        //     url_imagen : celula.url_imagen\n        // }\n        // try{\n        //     let post_etiqueta = await Api(`api/valor-etiqueta`, JSON.stringify(data),\n        //                                     {'Content-Type': 'application/json'}, true,'put');\n    }\n    \n    async function cambiarCheckCelulasValidas(e){\n        if(e.target.checked)\n        {\n            let resultado = await Api(`api/celulas-etiquetadas?estado_etiquetar=${e.target.checked}`, {}, {}, true, 'get');\n            console.log(\"Resultado de células no clasificadas\")\n            console.log(resultado)\n            if (resultado && resultado.status === 200)\n            {\n                if(resultado.data.celulas){\n                    setCelula(resultado.data.celulas);\n                }else{\n                    console.log(\"no hay imagenes para clasificar\");\n                }\n                \n            }else {\n                alert.show('Error al cargar datos', { type: 'error' });\n                setCelula([]);\n            }\n        }\n        else{\n            console.log(\" está llamando células nuevamente\")\n            obtenerDatosCelula();\n        }\n    }\n    return (\n        <Layout title=\"Inicio\">\n            <div style={{ padding: \"20px\" }}>\n                <h1 className=\"h2\">Etiquetas</h1>\n                <Form.Group controlId=\"formBasicCheckbox\" style={{width:\"255px\", height:\"auto\", marginLeft:\"10px\"}}>\n                    <Form.Check type=\"checkbox\" label=\"Mostrar solo células sin validar\" onChange={(e) => cambiarCheckCelulasValidas(e)}/>\n                </Form.Group>\n                <Table striped bordered hover>\n                    <thead>\n                        <tr>\n                        <th>Celula</th>\n                        <th>Resumen</th>\n                        <th>Acciones</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    {celula.map((p) =>\n                        <tr>\n                            {estadoMostrarNoValidas === false ?\n                            // Se muestran todas las células ( )\n                            <> \n                                <td>\n                                    <img style={{width:\"200px\", height:\"250px\", marginTop:\"2px\"}} src={p.url_imagen}></img>\n                                </td>\n                                <td>\n                                <h5>Tipo de célula</h5>\n                                    {p.etiqueta_id <= 38 ? \n                                            <>\n                                            <h6>{p.valor} : {p.contador}</h6>\n                                            </>\n                                            :\n                                            <>\n                                            </>\n                                    }\n                                    {p.otros_valores.map((p_valores) => (\n                                        <>\n                                            {p_valores.etiqueta_id <= 38 ? \n                                                <>\n                                                <h6>{p_valores.valor} : {p_valores.contador}</h6>\n                                                </>\n                                                :\n                                                <>\n                                                </>\n                                            }\n                                        </>\n                                    ))}\n                                    <br></br>\n                                    <h5>Alteraciones</h5>\n                                    {p.otros_valores.map((p_valores) => (\n                                        <>\n                                        {p_valores.etiqueta_id >= 38 ? \n                                            <>\n                                                <h6>{p_valores.valor} : {p_valores.contador}</h6>\n                                            </>\n                                            :\n                                            <>\n                                            </>\n                                        }\n                                        </>\n                                    ))}\n                                    {p.etiqueta_id >= 38 ? \n                                        <>\n                                            <h6>{p.valor} : {p.contador}</h6>\n                                        </>\n                                        :\n                                        <>\n                                        </>\n                                    }\n                                    <br></br>\n                                </td>\n                            \n                                <td>\n                                    <Form.Group controlId=\"formBasicCheckbox\" style={{width:\"155px\", height:\"auto\", marginLeft:\"10px\"}}>\n                                        <Form.Check type=\"checkbox\" label=\"Validar Etiquetas\" onChange={(e) => cambiarCheckValidar(e, p)} />\n                                    </Form.Group>\n                                    <Button variant=\"secondary\"\n                                        style={{width:\"155px\", height:\"auto\", marginLeft:\"10px\", marginTop:\"10px\", textAlign:\"left\"}}\n                                        as={Link} to={`/ejercitar/celula/${p.id}`}\n                                    >\n                                        Volver a etiquetar</Button>\n                                </td>\n                            </> \n                            :\n                            <>\n                            // Validar \n                            </>\n                            }\n                        </tr>\n                    )}\n                    </tbody>\n                </Table>\n            </div>\n        </Layout>\n    )\n}\n\nexport default Informacion;\n","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/Ejercitar.js",["87","88","89"],"import React, { useState, useEffect} from 'react';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Layout from './Layout';\nimport { Api} from '../utils/Api';\nimport { Button, Modal, Image, Table} from 'react-bootstrap'\nimport {toast} from 'react-toastify';\nimport { ArrowLeft } from 'react-bootstrap-icons';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction Ejercitar(props){\n\n    const [show, setShow] = useState(false);\n    const handleClose = () => setShow(false);\n    const [mostrarImagenCelula, setMostrarImagenCelula] = useState(false)\n\n    const [esAlteracion, setEsAlteracion] = useState(false);\n    const [subCategorias, setSubCategorias] = useState([]);\n    const [subCategoriaSeleccionada, setSubCategoriaSeleccionada] = useState([]);\n    const [categorias, setCategoria] = useState([]);\n    const [etiquetas, setEtiquetas] = useState([]);\n    const [categoriaSeleccionada, setCategoriaSeleccionada] = useState({\n        id: \"\",\n        nombre: \"\"\n    });\n    const [etiquetaSeleccionada, setEtiquetaSeleccionada] = useState({\n        id: \"\",\n        nombre: \"\"\n    });\n\n    const [alteraciones, setAlteraciones] = useState([]);\n    const [celula, setCelula] = useState([]);\n    const [alteracionSeleccionada, setAlteracionSeleccionada] = useState({\n        id: \"\",\n        nombre: \"\"\n    });\n    const [estadoClickCategoria, setEstadoClickCategoria] = useState(true);\n    const [estadoMostrarCategoria, setEstadoMostrarCategoria] = useState(false);\n    const menu = () => {\n        props.history.push('/menu');\n    }\n    \n    async function obtenerCategorias(){\n        let categorias = await Api('api/categorias', {}, {}, true, 'get');  \n        if (categorias && categorias.status === 200) {\n            setCategoria(categorias.data.categorias)\n        }else{\n            toast.warning(\"No se encontraron categorías\", {position: \"bottom-center\", autoClose: 4000, })\n            setShow(false);\n        }\n    }\n\n    async function enviarInfo(){\n        if(categoriaSeleccionada.id==15){\n            etiquetaSeleccionada.id = 59\n            etiquetaSeleccionada.nombre = ''\n        }\n        let data = {\n            categoria_id : categoriaSeleccionada.id,\n            categoria_nombre : categoriaSeleccionada.nombre,\n            etiqueta_id : etiquetaSeleccionada.id,\n            valor_etiqueta : etiquetaSeleccionada.nombre,\n            celula_id : celula.id,\n            alteracion_id : alteracionSeleccionada.id ? alteracionSeleccionada.id : \"\",\n            valor_alteracion : alteracionSeleccionada.nombre\n        }\n        try{\n            let post_etiqueta = await Api(`api/valor-etiqueta`, JSON.stringify(data),\n                                            {'Content-Type': 'application/json'}, true,'post');\n            if (post_etiqueta && post_etiqueta.status === 200) {\n                setEstadoClickCategoria(true);\n                // Si se envía la info, limpiamos los datos.\n                limpiarDatos();\n                setCelula([]); \n                toast.success(\"Etiqueta Enviada con éxito\", {position: \"bottom-center\", autoClose: 1000, hideProgressBar: true,});\n                setShow(true)                \n            }else{\n                toast.warning(\"Debe seleccionar Categoría y Tipo de Célula para Etiquetar\", {position: \"bottom-center\", autoClose: 4000, })\n                setShow(false);\n            }\n        }\n        catch (error) {\n            toast.warning(\"Error al enviar info\", {position: \"bottom-center\", autoClose: 4000, })\n            setShow(false);\n        }\n\n    }\n\n    async function llamarEtiquetas(categoria_id, categoria_nombre, dependencia_id){\n        if (categoria_id === 2){\n            let subcategoria = await Api(`api/categoria/${categoria_id}/sub-categorias`, {}, {}, true, 'get');\n            setSubCategorias(subcategoria.data.categorias)\n        }else{\n            setSubCategorias([]);\n            setEstadoClickCategoria(true);\n            let etiqueta = await Api(`api/etiquetas?categoria_id=${categoria_id}`, {}, {}, true, 'get');\n            if (etiqueta && etiqueta.status === 200){\n                setEtiquetas(etiqueta.data.etiquetas)\n                if (categoriaSeleccionada.nombre===\"\"){\n                    setCategoriaSeleccionada({\n                        id : categoria_id,\n                        nombre : categoria_nombre\n                    })\n                }\n                setEstadoClickCategoria(false);\n                setEstadoMostrarCategoria(true);\n            }else{\n                toast.warning(\"Error al llamar etiquetas\", {position: \"bottom-center\", autoClose: 4000, })\n                setShow(false);\n            }\n        }\n\n        if(dependencia_id){\n            categoria_id = dependencia_id;\n        }\n        \n        let alteracion = await Api(`api/categorias/alteraciones?categoria_id=${categoria_id}`, {}, {}, true, 'get');\n        if (alteracion && alteracion.status === 200){\n            setAlteraciones(alteracion.data.alteraciones)\n        }else{\n            console.log(\"eror al llamar alteraciones\")\n        }\n\n          \n    }\n\n    async function obtenerDatosCelula() {\n    let resultado = await Api(`api/celula?celula_id=${props.match.params.celula_id ? props.match.params.celula_id : \"\"}`, {}, {}, true, 'get');\n        if (resultado && resultado.status === 200) {\n            if(resultado.data.celula){\n                setCelula(resultado.data.celula);\n            }else{\n                setMostrarImagenCelula(true);\n            }\n            \n        } else {\n             //alert.show('Error al cargar datos', { type: 'error' });\n            setCelula([]);\n        }\n    }\n\n    function obtenerEtiquetaSeleccionada(etiqueta_id, etiqueta_nombre){\n        if(esAlteracion){\n            setAlteracionSeleccionada({\n                'id' : etiqueta_id,\n                'nombre' : etiqueta_nombre\n            })\n        }else{  \n            setEtiquetaSeleccionada({\n                'id' : etiqueta_id,\n                'nombre' : etiqueta_nombre   \n            })\n        }\n    }\n\n    function limpiarDatos(){\n        setCategoriaSeleccionada({\n            id : \"\",\n            nombre : \"\"\n        });\n        setEtiquetaSeleccionada({\n            id : \"\",\n            nombre : \"\"\n        });\n        setEtiquetas([]);\n        setAlteracionSeleccionada([]);\n        setAlteraciones([]);\n        setEstadoMostrarCategoria(false);\n        setEstadoClickCategoria(true);\n        setEsAlteracion(false);\n    }\n\n    function ejercitarNuevamente(){\n        handleClose()\n        setEstadoMostrarCategoria(false);\n        obtenerDatosCelula()\n    }\n\n    useEffect(\n        () => {\n            console.log(props.match.params)\n            obtenerDatosCelula();\n            obtenerCategorias();\n            obtenerEtiquetaSeleccionada();\n        },\n        []\n    )\n    \n    return (\n            <Layout>\n                        <div style={{ marginTop: \"10px\" }} align=\"center\" hidden={mostrarImagenCelula} >\n                            <div hidden={estadoMostrarCategoria}>\n                                {/* <Button variant=\"outline-dark\" style={{width:\"200px\", height:\"30px\", verticalAlign:\"top\"}}  disabled>\n                                    Célula a clasificar\n                                </Button> */}\n                                <Image style={{width:\"200px\", height:\"250px\", marginTop:\"2px\"}} src={celula.url_imagen} rounded></Image>\n                                <br></br>\n                                <Button variant=\"outline-dark\" style={{width:\"200px\", height:\"30px\", marginTop:\"3px\", marginBottom:\"3px\"}} disabled>\n                                    Seleccione línea\n                                </Button>\n                                <br></br>\n                                {estadoMostrarCategoria===false ? \n                                <>\n                                    {categorias.map((radio, index) => (\n                                        <>\n                                        <Button \n                                            key={radio.id}\n                                            variant={categoriaSeleccionada.id===radio.id ? \"secondary\":\"outline-secondary\"}\n                                            value={radio.descripcion} \n                                            onClick={() => llamarEtiquetas(radio.id, radio.nombre)}\n                                            style={{width:\"250px\"}} \n                                            >\n                                            {radio.nombre}\n                                        </Button>\n                                        {/* // Poner if radio.nombre === leucocito / Desplegando sub categorias leucocito */}\n                                        {radio.nombre ===\"Leucocito\" &&\n                                            <> \n                                            {subCategorias.map((radio, index) => (\n                                                <Button \n                                                    key={radio.id}\n                                                    variant={subCategoriaSeleccionada.id===radio.id ? \"secondary\":\"outline-secondary\"}\n                                                    value={radio.descripcion} \n                                                    onClick={() => llamarEtiquetas(radio.id, radio.nombre, radio.dependencia_id)}\n                                                    style={{width:\"210px\", marginBottom:\"5px\"}} \n                                                    >\n                                                    {radio.nombre}\n                                                </Button>\n                                            ))}\n                                            </> //React fragment\n                                        }\n                                        </>\n                                    ))}\n                                </>     \n                                :\n                                  <></>  \n                                }\n                            </div>\n                            <ArrowLeft hidden={estadoClickCategoria} align=\"left\" variant=\"outline-secondary\" onClick={(e)=>{\n                                limpiarDatos();\n                            }}> arrow left</ArrowLeft>\n                            <div hidden = {estadoClickCategoria} style={{ marginTop: \"10px\" }} align=\"center\">    \n                                <h6>Línea actual: {categoriaSeleccionada.nombre}</h6>\n                                <br></br>\n                                <h5>Seleccione tipo de célula</h5>\n                                {etiquetas.map((radio, index) => (\n                                    <Button\n                                        key={radio.id}                                                 \n                                        style={{width:\"280px\", height:\"auto\", marginLeft:\"10px\", textAlign:\"left\"}}\n                                        value={radio.nombre}\n                                        variant={etiquetaSeleccionada.nombre===radio.nombre || alteracionSeleccionada.nombre ===radio.nombre ? \"secondary\":\"outline-secondary\"}\n                                        onClick={() =>obtenerEtiquetaSeleccionada(radio.id, radio.nombre)} \n                                    >\n                                        <Image style={{width:\"40px\", height:\"40px\", marginRight:\"10px\"}} src={radio.ejemplo} rounded></Image>\n                                        {radio.nombre}\n                                    </Button>\n                                ))}\n                            </div>\n                            <div hidden={estadoClickCategoria} style={{ marginTop: \"20px\" }} align=\"center\">\n                            <h6>Alteraciones</h6>\n                                    {alteraciones.map((radio, index) => (\n                                    <div key={radio.id}>\n                                        <Button \n                                            key={radio.nombre}                                                 \n                                            style={{width:\"210px\"}}\n                                            value={radio.nombre}\n                                            variant={alteracionSeleccionada.nombre===radio.nombre ? \"secondary\":\"outline-secondary\"}\n                                            onClick={(e) =>{\n                                                if (etiquetaSeleccionada.id){\n                                                    setEsAlteracion(true);\n                                                    llamarEtiquetas(radio.id, radio.nombre);\n                                                }else{\n                                                    toast.warning(\"Debe seleccionar el tipo de célula antes de ver alteraciones\", {position: \"bottom-center\", autoClose: 4000, })\n                                                    setShow(false);\n                                                }\n                                            }\n                                            } \n                                        >\n                                            {radio.nombre}\n                                        </Button>\n                                    </div>\n                                    ))}\n                            </div>\n                                <Table striped bordered hover size=\"sm\" hidden={estadoClickCategoria} style={{marginTop:\"10px\"}}>\n                                    <thead>\n                                        <tr>\n                                            <th>Línea</th>\n                                            <th>Célula</th>\n                                            <th>Alteración</th>\n                                        </tr>\n                                    </thead>\n                                    <tbody>\n                                        <tr>\n                                            <td>{categoriaSeleccionada.nombre}</td>\n                                            <td >{etiquetaSeleccionada.nombre}</td>\n                                            <td >{alteracionSeleccionada.nombre}</td>\n                                        </tr>\n                                    </tbody>\n                                </Table>\n                                <Button  style={{width:\"200px\", height:\"50px\", marginTop:\"20px\"}} variant=\"info\" onClick={(e)=>{\n                                        enviarInfo();\n                                        }\n                                    }>\n                                    Enviar respuesta\n                                </Button> \n                                \n                        </div>\n                        <div hidden={!mostrarImagenCelula} style={{ marginTop: \"20px\" }} align=\"center\">\n                                    <h5> No hay fotos para etiquetar </h5>\n                        </div>\n                        <Modal show={show} onHide={handleClose}>\n                            <Modal.Header closeButton>\n                                <Modal.Title>¿Qué deseas hacer?</Modal.Title>\n                            </Modal.Header>\n                            <Modal.Body>Puedes Volver a Ejercitar o volver al Menú principal</Modal.Body>\n                            <Modal.Footer>\n                                <Button variant=\"secondary\" onClick={menu}>\n                                    Volver a Menú\n                                </Button>\n                                <Button variant=\"primary\" onClick={ejercitarNuevamente}>\n                                    Volver a Ejercitar\n                                </Button>\n                            </Modal.Footer>\n                        </Modal>\n            </Layout>\n        )\n}   \n\n\n\nexport default Ejercitar;","/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/utils/Api.js",[],"/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/Layout.js",[],"/home/felipe/Escritorio/Proyectos/sangria/sangria_ui/src/componentes/menu/MenuUsuario.js",["90","91","92","93","94","95","96"],"import React, {useState, useContext, useEffect, Text} from 'react';\nimport { Dropdown, ButtonGroup} from 'react-bootstrap';\nimport { Link} from 'react-router-dom';\nimport {FaUserTie} from 'react-icons/fa';\nimport UserContext from '../../UserContext';\n// import {FormUsuario, getUsuario, FormCambiarPassword} from '../../modulos/administracion/FormularioUsuario';\n\n\nfunction MenuUsuario(props) {\n    const [showFormUsuario, setShowFormUsuario] = useState(false);\n    const [showCambiarPassword, setShowCambiarPassword] = useState(false);\n    const contexto = useContext(UserContext);\n\n    const menu = () => {\n        props.history.push('/');\n    } \n\n    function formularioUsuario(){\n        setShowFormUsuario(true);\n    }\n\n    function cerrarModalUsuario(){\n        setShowFormUsuario(false);\n        setShowCambiarPassword(false);\n    }\n\n    return (\n        \n        <Dropdown alignRight as={ButtonGroup}>\n            <Dropdown.Toggle variant=\"outline-success\" id=\"dropdown-basic\" size=\"sm\"><FaUserTie /></Dropdown.Toggle>\n            <Dropdown.Menu>\n                <Dropdown.Item>{contexto.perfil.nombre}</Dropdown.Item>\n                <Dropdown.Item as={Link} to='/logout'>Cerrar sesión</Dropdown.Item>\n            </Dropdown.Menu>\n            \n        </Dropdown>\n    );\n}\n\nexport default MenuUsuario;",{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","replacedBy":"100"},{"ruleId":"101","severity":1,"message":"102","line":18,"column":9,"nodeType":"103","endLine":18,"endColumn":11,"suggestions":"104"},{"ruleId":"105","severity":1,"message":"106","line":1,"column":16,"nodeType":"107","messageId":"108","endLine":1,"endColumn":24},{"ruleId":"105","severity":1,"message":"109","line":1,"column":26,"nodeType":"107","messageId":"108","endLine":1,"endColumn":35},{"ruleId":"105","severity":1,"message":"110","line":1,"column":37,"nodeType":"107","messageId":"108","endLine":1,"endColumn":47},{"ruleId":"105","severity":1,"message":"111","line":6,"column":9,"nodeType":"107","messageId":"108","endLine":6,"endColumn":12},{"ruleId":"105","severity":1,"message":"106","line":1,"column":16,"nodeType":"107","messageId":"108","endLine":1,"endColumn":24},{"ruleId":"105","severity":1,"message":"109","line":1,"column":38,"nodeType":"107","messageId":"108","endLine":1,"endColumn":47},{"ruleId":"112","severity":1,"message":"113","line":36,"column":47,"nodeType":"114","messageId":"115","endLine":36,"endColumn":49},{"ruleId":"101","severity":1,"message":"116","line":15,"column":9,"nodeType":"103","endLine":15,"endColumn":11,"suggestions":"117"},{"ruleId":"105","severity":1,"message":"110","line":1,"column":26,"nodeType":"107","messageId":"108","endLine":1,"endColumn":36},{"ruleId":"105","severity":1,"message":"118","line":9,"column":11,"nodeType":"107","messageId":"108","endLine":9,"endColumn":18},{"ruleId":"105","severity":1,"message":"119","line":15,"column":12,"nodeType":"107","messageId":"108","endLine":15,"endColumn":16},{"ruleId":"105","severity":1,"message":"120","line":16,"column":36,"nodeType":"107","messageId":"108","endLine":16,"endColumn":61},{"ruleId":"121","severity":1,"message":"122","line":114,"column":37,"nodeType":"123","endLine":114,"endColumn":118},{"ruleId":"124","severity":1,"message":"125","line":175,"column":31,"nodeType":"126","endLine":177,"endColumn":29},{"ruleId":"105","severity":1,"message":"127","line":18,"column":38,"nodeType":"107","messageId":"108","endLine":18,"endColumn":65},{"ruleId":"112","severity":1,"message":"113","line":53,"column":36,"nodeType":"114","messageId":"115","endLine":53,"endColumn":38},{"ruleId":"101","severity":1,"message":"128","line":185,"column":9,"nodeType":"103","endLine":185,"endColumn":11,"suggestions":"129"},{"ruleId":"105","severity":1,"message":"109","line":1,"column":38,"nodeType":"107","messageId":"108","endLine":1,"endColumn":47},{"ruleId":"105","severity":1,"message":"130","line":1,"column":49,"nodeType":"107","messageId":"108","endLine":1,"endColumn":53},{"ruleId":"105","severity":1,"message":"131","line":10,"column":12,"nodeType":"107","messageId":"108","endLine":10,"endColumn":27},{"ruleId":"105","severity":1,"message":"132","line":11,"column":12,"nodeType":"107","messageId":"108","endLine":11,"endColumn":31},{"ruleId":"105","severity":1,"message":"133","line":14,"column":11,"nodeType":"107","messageId":"108","endLine":14,"endColumn":15},{"ruleId":"105","severity":1,"message":"134","line":18,"column":14,"nodeType":"107","messageId":"108","endLine":18,"endColumn":31},{"ruleId":"105","severity":1,"message":"135","line":22,"column":14,"nodeType":"107","messageId":"108","endLine":22,"endColumn":32},"no-native-reassign",["136"],"no-negated-in-lhs",["137"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'obtenerUsuario'. Either include it or remove the dependency array.","ArrayExpression",["138"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","'useContext' is defined but never used.","'Api' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'contexto' and 'props.history'. Either include them or remove the dependency array.",["139"],"'columns' is assigned a value but never used.","'rows' is assigned a value but never used.","'setEstadoMostrarNoValidas' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-comment-textnodes","Comments inside children section of tag should be placed inside braces","Literal","'setSubCategoriaSeleccionada' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'obtenerDatosCelula', 'obtenerEtiquetaSeleccionada', and 'props.match.params'. Either include them or remove the dependency array.",["140"],"'Text' is defined but never used.","'showFormUsuario' is assigned a value but never used.","'showCambiarPassword' is assigned a value but never used.","'menu' is assigned a value but never used.","'formularioUsuario' is defined but never used.","'cerrarModalUsuario' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"141","fix":"142"},{"desc":"143","fix":"144"},{"desc":"145","fix":"146"},"Update the dependencies array to be: [obtenerUsuario]",{"range":"147","text":"148"},"Update the dependencies array to be: [contexto, props.history]",{"range":"149","text":"150"},"Update the dependencies array to be: [obtenerDatosCelula, obtenerEtiquetaSeleccionada, props.match.params]",{"range":"151","text":"152"},[488,490],"[obtenerUsuario]",[357,359],"[contexto, props.history]",[6786,6788],"[obtenerDatosCelula, obtenerEtiquetaSeleccionada, props.match.params]"]